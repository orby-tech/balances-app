schema {
  query: Query
  mutation: Mutation
}

type Query {
  user: User!
  settings: Settings!
  balances: [Balance]
  transactions(page: Int!, organizationId: String): [Transaction]
  currencies: [Currency]
  currenciesRate: CurrenciesRate
  organizations: [Organization]
}

type Mutation {
  setMainCurrency(setMainCurrencyInput: SetMainCurrencyInput): String!
  setNewPassword(setNewPasswordInput: SetNewPasswordInput): String!
  signUp(signUpInput: SignUpInput): String!
  addTag(addTagInput: AddTagInput): String!
  addBalance(addBalanceInput: AddBalanceInput!): Balance!
  deleteBalance(deleteBalanceInput: DeleteBalanceInput!): String

  addTransaction(addTransactionInput: AddTransactionInput!): String
  deleteTransaction(deleteTransactionInput: DeleteTransactionInput!): String
  addOrganization(addOrganizationInput: AddOrganizationInput!): String
  leaveOrganization(leaveOrganizationInput: LeaveOrganizationInput!): String
  kickOutUserFromOrganization(
    kickOutUserFromOrganizationInput: KickOutUserFromOrganizationInput!
  ): String

  addUserToOrganization(
    addUserToOrganizationInput: AddUserToOrganizationInput!
  ): String
}

input SetMainCurrencyInput {
  id: ID!
}

input AddOrganizationInput {
  name: String!
}

input LeaveOrganizationInput {
  organizationId: String!
}

input KickOutUserFromOrganizationInput {
  username: String!
  organizationId: String!
}

input AddUserToOrganizationInput {
  name: String!
  organizationId: String!
}

input SetNewPasswordInput {
  password: String!
}

input SignUpInput {
  username: String!
  email: String!
  password: String!
}

input AddTagInput {
  transactionType: TransactionType
  title: String
}

input AddBalanceInput {
  organizationId: String
  title: String!
  host: String!
  value: Float!
  currencyId: String!
  type: BalanceType!
}

input DeleteBalanceInput {
  id: String!
}

type User {
  email: String!
  username: String
  mainCurrency: String!
}

type Settings {
  mainCurrency: String!
  tags: [Tag]
}

type Balance {
  organization_id: String
  id: ID!
  title: String!
  host: String!
  value: Float!
  valueInMain: Float!
  currencyId: String!
  type: BalanceType!
}

enum BalanceType {
  CARD
}

enum TransactionType {
  RECEIVE
  SEND
  TRANSFER
}

type CurrenciesRate {
  meta: CurrenciesRateMeta!
  data: [CurrenciesRateData]!
}

type CurrenciesRateMeta {
  last_updated_at: String!
}

type CurrenciesRateData {
  code: String!
  value: Float!
}

enum RoleOrganisationType {
  OWNER
  ADMIN
  WATCHER
}

type Organization {
  organization_id: String!
  name: String!
  role: RoleOrganisationType!
  users: [OrganizationUser]!
}

type OrganizationUser {
  email: String!
  role: RoleOrganisationType!
}

type Transaction {
  type: TransactionType!
  id: ID!

  from: ID
  fromValue: String
  fromCurrency: String

  to: ID
  toValue: String
  toCurrency: String

  provider: String
  fee: String
  feeInPercents: String
  tags: [Tag]
}

input AddTransactionInput {
  organizationId: String
  type: TransactionType!

  from: ID
  fromValue: Float
  fromCurrency: String

  to: ID
  toValue: Float
  toCurrency: String

  provider: String
  tags: [TagInput]!
}

input TagInput {
  transactionName: TransactionType!
  title: String!
  id: ID
}

input DeleteTransactionInput {
  organizationId: String
  id: String!
}

type Tag {
  transactionName: String!
  title: String!
  id: ID!
}

type Currency {
  id: ID!
  title: String!
  shortTitle: String!
  internationalShortName: String!
  internationalSimbol: String!
  valueRelatedMain: String!
}
